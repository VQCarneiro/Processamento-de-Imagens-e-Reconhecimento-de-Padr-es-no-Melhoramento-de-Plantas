########################################################################################################################
# Lavras - MG
# 08/04/2020
# Universidade Federal de Lavras - UFLA
# Departamento de Biologia
# Programa de Pós Graduação em Genética e Melhoramento de Plantas
# Disciplina: Processamento de imagens e reconhecimento de padrões no melhoramento de plantas
# Docente: Vinícius Quintão Carneiro
# E-mail: vinicius.carneiro@ufla.br
# Github: vqcarneiro
########################################################################################################################
# PROCEDIMENTO: Translação em imagens binárias
########################################################################################################################
# Importar pacotes
import cv2 # Importa o pacote opencv
import numpy as np # Importa o pacote numpy
from matplotlib import pyplot as plt # Importa o pacote matplotlib
########################################################################################################################
# Leitura da imagem

nome_arquivo = 'img_quadrado.png'
img = cv2.imread(nome_arquivo,0)
print('----------------------------------------------------------------------------------------------------------------')
print('IMAGEM ORIGINAL')
print('----------------------------------------------------------------------------------------------------------------')
print(img)
print('----------------------------------------------------------------------------------------------------------------')
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))
print('----------------------------------------------------------------------------------------------------------------')
########################################################################################################################
# Transformações em imagens
M_01 = np.float32([[1,0, 0],[0,1,1]])
img_tl1 = cv2.warpAffine(img,M_01,(img.shape[1],img.shape[0]))
print('----------------------------------------------------------------------------------------------------------------')
print('DESLOCAMENTO PARA BAIXO')
print('----------------------------------------------------------------------------------------------------------------')
print(img_tl1)
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img_tl1)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))

M_02 = np.float32([[1,0, 0],[0,1,-1]])
img_tl2 = cv2.warpAffine(img,M_02,(img.shape[1],img.shape[0]))
print('----------------------------------------------------------------------------------------------------------------')
print('DESLOCAMENTO PARA CIMA')
print('----------------------------------------------------------------------------------------------------------------')
print(img_tl2)
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img_tl2)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))

M_03 = np.float32([[1,0, 1],[0,1,0]])
img_tl3 = cv2.warpAffine(img,M_03,(img.shape[1],img.shape[0]))
print('----------------------------------------------------------------------------------------------------------------')
print('DESLOCAMENTO PARA DIREITA')
print('----------------------------------------------------------------------------------------------------------------')
print(img_tl3)
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img_tl3)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))

M_04 = np.float32([[1,0, -1],[0,1,0]])
img_tl4 = cv2.warpAffine(img,M_04,(img.shape[1],img.shape[0]))
print('----------------------------------------------------------------------------------------------------------------')
print('DESLOCAMENTO PARA ESQUERDA')
print('----------------------------------------------------------------------------------------------------------------')
print(img_tl4)
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img_tl4)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))

M_05 = np.float32([[1,0, -2],[0,1,2]])
img_tl5 = cv2.warpAffine(img,M_05,(img.shape[1],img.shape[0]))
print('----------------------------------------------------------------------------------------------------------------')
print('DESLOCAMENTO PARA BAIXO E PARA ESQUERDA')
print('----------------------------------------------------------------------------------------------------------------')
print(img_tl5)
print('----------------------------------------------------------------------------------------------------------------')
print('INFORMAÇÕES')
print('----------------------------------------------------------------------------------------------------------------')
lin, col = np.shape(img_tl5)
print('Dimensão: ' + str(lin) +' x '+ str(col))
print('Largura: ' + str(col))
print('Altura: ' + str(lin))
print('----------------------------------------------------------------------------------------------------------------')
########################################################################################################################
# Apresentar imagens

# Imagem Em RGB
plt.figure('TRANSLAÇÃO')
plt.subplot(2,3,1)
plt.imshow(img,cmap="gray")
plt.title("ORIGINAL")

plt.subplot(2,3,2)
plt.imshow(img_tl1,cmap="gray")
plt.title("BAIXO")

plt.subplot(2,3,3)
plt.imshow(img_tl2,cmap="gray")
plt.title("CIMA")

plt.subplot(2,3,4)
plt.imshow(img_tl3,cmap="gray")
plt.title("DIREITA")

plt.subplot(2,3,5)
plt.imshow(img_tl4,cmap="gray")
plt.title("ESQUERDA")

plt.subplot(2,3,6)
plt.imshow(img_tl5,cmap="gray")
plt.title("BAIXO E ESQUERDA")

plt.show()
########################################################################################################################